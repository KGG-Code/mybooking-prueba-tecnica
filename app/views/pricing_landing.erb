<!doctype html>
<html lang="es">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdn.datatables.net/2.3.3/css/dataTables.dataTables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" integrity="sha512-nMNlpuaDPrqlEls3IX/Q56H36qvBASwb3ipuo3MxeWbsQB1881ox0cRv7UPTgBlriqoynt35KjEwgGUeUXIPnw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />

    <title>Gestión de Precios - MyBooking</title>
  </head>
  <body>
    <div class="content">
      <!-- Filtros -->
      <div class="container">
        <div class="row">
          <form class="row g-3" id="filters-form">
            <div class="col-md-2">
              <label for="rental_location_id" class="form-label">Sucursal</label>
              <select name="rental_location_id" id="rental_location_id" class="form-select">
                <option value="">Seleccione una sucursal</option>
              </select>
            </div>
            <div class="col-md-2">
              <label for="rate_type_id" class="form-label">Tipo de tarifa</label>
              <select name="rate_type_id" id="rate_type_id" class="form-select" disabled>
                <option value="">Seleccione un tipo de tarifa</option>
              </select>
            </div>
            <div class="col-md-3">
              <label for="season_definition_id" class="form-label">Grupo de temporadas</label>
              <select name="season_definition_id" id="season_definition_id" class="form-select" disabled>
                <option value="">Tarifas sin temporadas</option>
              </select>
            </div>
            <div class="col-md-2">
              <label for="season_id" class="form-label">Temporada</label>
              <select name="season_id" id="season_id" class="form-select" disabled>
                <option value="">Seleccione la temporada</option>
              </select>
            </div>
            <div class="col-md-2">
              <label for="unit" class="form-label">Duración</label>
              <select name="unit" id="unit" class="form-select">
                <option value="">Seleccione la unidad</option>
                <option value="1">Meses</option>
                <option value="2" selected>Días</option>
                <option value="3">Horas</option>
                <option value="4">Minutos</option>
              </select>
            </div>
            <div class="col-md-1">
              <button type="button" class="btn btn-primary w-100" style="margin-top: 32px;" id="filter-btn">Filtrar</button>
            </div>
          </form>
        </div>
      </div>
      <hr>
      
      <!-- Tabla con las tarifas -->
      <div class="container">
        <div class="row">
          <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <div>
                <label for="entries-per-page" class="form-label">Mostrar:</label>
                <select id="entries-per-page" class="form-select form-select-sm d-inline-block w-auto">
                  <option value="10">10 entradas por página</option>
                  <option value="25">25 entradas por página</option>
                  <option value="50">50 entradas por página</option>
                  <option value="100">100 entradas por página</option>
                </select>
              </div>
            </div>
            
            <table id="prices_table" class="table table-hover">
              <thead>
                <tr>
                  <th scope="col">Categoría</th>
                  <!-- Las columnas de unidades se generarán dinámicamente -->
                </tr>
              </thead>
              <tbody>
                <!-- Los datos se cargarán dinámicamente -->
              </tbody>
            </table>
            
            <div class="d-flex justify-content-between align-items-center">
              <div id="table-info" class="text-muted">
                Mostrando 0 a 0 de 0 entradas
              </div>
              <nav aria-label="Paginación de la tabla">
                <ul class="pagination pagination-sm" id="pagination">
                  <!-- La paginación se generará dinámicamente -->
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Acciones -->
      <div class="container">
        <div class="row">
          <div class="col-12">
            <button class="btn btn-secondary w-100" data-bs-toggle="modal" data-bs-target="#importModal">Importar</button>
          </div>
        </div> 
      </div>

      <!-- Modal de Importación -->
      <div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="importModalLabel">Importar Precios</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="importForm" enctype="multipart/form-data">
                <div class="mb-3">
                  <label for="fileInput" class="form-label">Seleccionar archivo</label>
                  <input type="file" class="form-control" id="fileInput" name="file" accept=".csv,.xlsx" required>
                  <div class="form-text">Formatos soportados: CSV y XLSX</div>
                </div>
              </form>
              <div id="importProgress" class="d-none">
                <div class="progress">
                  <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                </div>
                <div class="text-center mt-2">Procesando archivo...</div>
              </div>
              <div id="importResult" class="d-none mt-3"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
              <button type="button" class="btn btn-primary" id="importBtn">Importar</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Loading spinner -->
    <div id="loading-spinner" class="d-none position-fixed top-50 start-50 translate-middle">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Cargando...</span>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/2.3.3/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.3.3/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js" integrity="sha512-2ImtlRlf2VVmiGZsjm9bEyhjGW4dU7B6TNwh/hx/iSByxNENtj3WVE6o/9Lj4TJeVXPi4bnOIMXFIJJAeufa0A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
      $(document).ready(function() {
        // Inicializar Select2 para todos los selects excepto rental_location_id
        $('select:not(#rental_location_id)').select2({
          theme: 'bootstrap-5'
        });

        // Cargar datos iniciales
        loadRentalLocations();
        
        // Event listeners
        $('#rental_location_id').on('change', function() {
          const rentalLocationId = $(this).val();
          if (rentalLocationId) {
            loadRateTypes(rentalLocationId);
            resetDependentFields(['rate_type_id', 'season_definition_id', 'season_id']);
          } else {
            resetDependentFields(['rate_type_id', 'season_definition_id', 'season_id']);
          }
        });

        $('#rate_type_id').on('change', function() {
          const rentalLocationId = $('#rental_location_id').val();
          const rateTypeId = $(this).val();
          if (rentalLocationId && rateTypeId) {
            loadSeasonDefinitions(rentalLocationId, rateTypeId);
            resetDependentFields(['season_definition_id', 'season_id']);
          } else {
            resetDependentFields(['season_definition_id', 'season_id']);
          }
        });

        $('#season_definition_id').on('change', function() {
          const seasonDefinitionId = $(this).val();
          if (seasonDefinitionId && seasonDefinitionId !== '') {
            loadSeasons(seasonDefinitionId);
            resetDependentFields(['season_id']);
          } else {
            // "Tarifas sin temporadas" seleccionado
            resetDependentFields(['season_id']);
            // Deshabilitar el campo season_id cuando no hay temporadas
            $('#season_id').prop('disabled', true);
            $('#season_id').empty().append('<option value="">Sin temporada específica</option>');
            $('#season_id').trigger('change');
          }
        });

        $('#filter-btn').on('click', function() {
          loadPricingData();
        });

        $('#entries-per-page').on('change', function() {
          loadPricingData();
        });

        // Import functionality
        $('#importBtn').on('click', function() {
          const fileInput = $('#fileInput')[0];
          const file = fileInput.files[0];
          
          if (!file) {
            alert('Por favor seleccione un archivo');
            return;
          }

          // Validate file extension
          const fileName = file.name.toLowerCase();
          if (!fileName.endsWith('.csv') && !fileName.endsWith('.xlsx')) {
            alert('Formato de archivo no válido. Solo se permiten archivos CSV y XLSX');
            return;
          }

          // Show progress
          $('#importProgress').removeClass('d-none');
          $('#importResult').addClass('d-none');
          $('#importBtn').prop('disabled', true);

          // Create FormData
          const formData = new FormData();
          formData.append('file', file);

          // Send request
          $.ajax({
            url: '/api/import/prices',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
              $('#importProgress').addClass('d-none');
              $('#importBtn').prop('disabled', false);
              
              // Debug: mostrar respuesta completa
              console.log('Response completa:', response);
              console.log('Errores:', response.errors);
              console.log('Cantidad de errores:', response.errors ? response.errors.length : 'undefined');
              
              if (response.status === 'success') {
                $('#importResult').removeClass('d-none').html(`
                  <div class="alert alert-success">
                    <h6>Importación exitosa</h6>
                    <p>${response.message}</p>
                    <small>Importadas: ${response.imported}/${response.total} filas</small>
                  </div>
                `);
                
                // Reload pricing data if we're on a filtered view
                if ($('#rental_location_id').val() && $('#rate_type_id').val()) {
                  loadPricingData();
                }
              } else if (response.status === 'partial_success') {
                $('#importResult').removeClass('d-none').html(`
                  <div class="alert alert-warning">
                    <h6>Importación con errores</h6>
                    <p>${response.message}</p>
                    <small>Importadas: ${response.imported}/${response.total} filas</small>
                    ${response.errors && Array.isArray(response.errors) && response.errors.length > 0 ? 
                      `<div class="mt-3">
                        <button class="btn btn-outline-danger btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#errorDetails" aria-expanded="false" aria-controls="errorDetails">
                          Ver errores detallados (${response.errors.length})
                        </button>
                        <div class="collapse mt-2" id="errorDetails">
                          <div class="card border-danger">
                            <div class="card-header bg-danger text-white">
                              <h6 class="mb-0">Errores de importación</h6>
                            </div>
                            <div class="card-body">
                              <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                  <thead>
                                    <tr>
                                      <th>Fila</th>
                                      <th>Valor erróneo</th>
                                      <th>Error</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    ${response.errors.map(error => {
                                      console.log('Procesando error:', error);
                                      return `
                                        <tr>
                                          <td><strong>${error.row || 'N/A'}</strong></td>
                                          <td>
                                            <small class="text-muted">
                                              ${error.values ? Object.entries(error.values).map(([key, value]) => 
                                                `<div><strong>${key}:</strong> ${value || 'vacío'}</div>`
                                              ).join('') : 'Sin valores'}
                                            </small>
                                          </td>
                                          <td><span class="text-danger">${error.reason || 'Error desconocido'}</span></td>
                                        </tr>
                                      `;
                                    }).join('')}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>` : 
                      `<div class="mt-2 text-muted">
                        <small>Debug: response.errors = ${JSON.stringify(response.errors)}</small>
                      </div>`
                    }
                  </div>
                `);
                
                // Reload pricing data if we're on a filtered view
                if ($('#rental_location_id').val() && $('#rate_type_id').val()) {
                  loadPricingData();
                }
              } else if (response.status === 'error') {
                $('#importResult').removeClass('d-none').html(`
                  <div class="alert alert-danger">
                    <h6>Error en la importación</h6>
                    <p>${response.message}</p>
                    <small>Importadas: ${response.imported}/${response.total} filas</small>
                    ${response.errors && Array.isArray(response.errors) && response.errors.length > 0 ? 
                      `<div class="mt-3">
                        <button class="btn btn-outline-danger btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#errorDetails" aria-expanded="false" aria-controls="errorDetails">
                          Ver errores detallados (${response.errors.length})
                        </button>
                        <div class="collapse mt-2" id="errorDetails">
                          <div class="card border-danger">
                            <div class="card-header bg-danger text-white">
                              <h6 class="mb-0">Errores de importación</h6>
                            </div>
                            <div class="card-body">
                              <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                  <thead>
                                    <tr>
                                      <th>Fila</th>
                                      <th>Valor erróneo</th>
                                      <th>Error</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    ${response.errors.map(error => {
                                      console.log('Procesando error:', error);
                                      return `
                                        <tr>
                                          <td><strong>${error.row || 'N/A'}</strong></td>
                                          <td>
                                            <small class="text-muted">
                                              ${error.values ? Object.entries(error.values).map(([key, value]) => 
                                                `<div><strong>${key}:</strong> ${value || 'vacío'}</div>`
                                              ).join('') : 'Sin valores'}
                                            </small>
                                          </td>
                                          <td><span class="text-danger">${error.reason || 'Error desconocido'}</span></td>
                                        </tr>
                                      `;
                                    }).join('')}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>` : ''
                    }
                  </div>
                `);
              }
            },
            error: function(xhr) {
              $('#importProgress').addClass('d-none');
              $('#importBtn').prop('disabled', false);
              
              let errorMessage = 'Error durante la importación';
              try {
                const response = JSON.parse(xhr.responseText);
                errorMessage = response.error || errorMessage;
              } catch (e) {
                // Use default error message
              }
              
              $('#importResult').removeClass('d-none').html(`
                <div class="alert alert-danger">
                  <h6>Error</h6>
                  <p>${errorMessage}</p>
                </div>
              `);
            }
          });
        });

        // Reset modal when closed
        $('#importModal').on('hidden.bs.modal', function() {
          $('#importForm')[0].reset();
          $('#importProgress').addClass('d-none');
          $('#importResult').addClass('d-none');
          $('#importBtn').prop('disabled', false);
        });

        // Fix accessibility issue with modal focus
        $('#importModal').on('shown.bs.modal', function() {
          // Ensure the modal has proper focus management
          $(this).removeAttr('aria-hidden');
        });

        $('#importModal').on('hide.bs.modal', function() {
          // Clean up any expanded error details when closing
          $('#errorDetails').removeClass('show');
        });
      });

      function resetDependentFields(fields) {
        fields.forEach(field => {
          $(`#${field}`).val('').trigger('change');
          $(`#${field}`).prop('disabled', true);
        });
      }

      function enableField(fieldId) {
        $(`#${fieldId}`).prop('disabled', false);
      }

      function showLoading() {
        $('#loading-spinner').removeClass('d-none');
      }

      function hideLoading() {
        $('#loading-spinner').addClass('d-none');
      }

      // Cargar sucursales
      function loadRentalLocations() {
        $.ajax({
          url: '/api/rental-locations',
          method: 'GET',
          success: function(data) {
            const select = $('#rental_location_id');
            select.empty().append('<option value="">Seleccione una sucursal</option>');
            data.forEach(location => {
              select.append(`<option value="${location.id}">${location.name}</option>`);
            });
            select.trigger('change');
            select.select2({
              theme: 'bootstrap-5'
            });
          },
          error: function(xhr, status, error) {
            console.error('Error cargando sucursales:', error);
            console.error('Response:', xhr.responseText);
          }
        });
      }

      // Cargar tipos de tarifa por sucursal
      function loadRateTypes(rentalLocationId) {
        showLoading();
        $.ajax({
          url: `/api/rate-types?rental_location_id=${rentalLocationId}`,
          method: 'GET',
          success: function(data) {
            const select = $('#rate_type_id');
            select.empty().append('<option value="">Seleccione un tipo de tarifa</option>');
            data.forEach(rateType => {
              select.append(`<option value="${rateType.id}">${rateType.name}</option>`);
            });
            enableField('rate_type_id');
            select.trigger('change');
            hideLoading();
          },
          error: function() {
            console.error('Error cargando tipos de tarifa');
            hideLoading();
          }
        });
      }

      // Cargar conjuntos de temporadas
      function loadSeasonDefinitions(rentalLocationId, rateTypeId) {
        showLoading();
        $.ajax({
          url: `/api/season-definitions?rental_location_id=${rentalLocationId}&rate_type_id=${rateTypeId}`,
          method: 'GET',
          success: function(data) {
            const select = $('#season_definition_id');
            select.empty().append('<option value="">Tarifas sin temporadas</option>');
            data.forEach(seasonDef => {
              select.append(`<option value="${seasonDef.id}">${seasonDef.name}</option>`);
            });
            enableField('season_definition_id');
            select.trigger('change');
            hideLoading();
          },
          error: function() {
            console.error('Error cargando conjuntos de temporadas');
            hideLoading();
          }
        });
      }

      // Cargar temporadas por conjunto
      function loadSeasons(seasonDefinitionId) {
        showLoading();
        $.ajax({
          url: `/api/seasons?season_definition_id=${seasonDefinitionId}`,
          method: 'GET',
          success: function(data) {
            const select = $('#season_id');
            select.empty().append('<option value="">Seleccione la temporada</option>');
            data.forEach(season => {
              select.append(`<option value="${season.id}">${season.name}</option>`);
            });
            enableField('season_id');
            select.trigger('change');
            hideLoading();
          },
          error: function() {
            console.error('Error cargando temporadas');
            hideLoading();
          }
        });
      }

      // Cargar datos de precios
      function loadPricingData() {
        const rentalLocationId = $('#rental_location_id').val();
        const rateTypeId = $('#rate_type_id').val();
        const seasonDefinitionId = $('#season_definition_id').val();
        const seasonId = $('#season_id').val();
        const unit = $('#unit').val();
        const perPage = $('#entries-per-page').val();

        if (!rentalLocationId || !rateTypeId) {
          alert('Por favor seleccione una sucursal y un tipo de tarifa');
          return;
        }

        showLoading();

        // Cargar directamente los datos de precios
        let pricingUrl = '/api/filtered-pricing?';
        pricingUrl += `rental_location_id=${rentalLocationId}&rate_type_id=${rateTypeId}`;
        
        // Manejar season_definition_id (incluyendo null para "Tarifas sin temporadas")
        if (seasonDefinitionId && seasonDefinitionId !== '') {
          pricingUrl += `&season_definition_id=${seasonDefinitionId}`;
        } else {
          pricingUrl += `&season_definition_id=null`;
        }
        
        // Manejar season_id (incluyendo null para "Sin temporada específica")
        if (seasonId && seasonId !== '') {
          pricingUrl += `&season_id=${seasonId}`;
        } else {
          pricingUrl += `&season_id=null`;
        }
        
        if (unit) {
          pricingUrl += `&unit=${unit}`;
        }
        if (perPage) {
          pricingUrl += `&per_page=${perPage}`;
        }

        $.ajax({
          url: pricingUrl,
          method: 'GET',
          success: function(data) {
            // Extraer todas las unidades únicas de los datos de precios
            const availableUnits = extractUnitsFromPricingData(data);
            
            // Generar columnas dinámicamente basadas en los datos reales
            generateTableHeaders(availableUnits);
            
            // Poblar la tabla con los datos
            populatePricingTable(data, availableUnits);
            hideLoading();
          },
          error: function(xhr) {
            console.error('Error cargando datos de precios:', xhr.responseText);
            alert('Error cargando los datos de precios');
            hideLoading();
          }
        });
      }

      // Extraer todas las unidades únicas de los datos de precios
      function extractUnitsFromPricingData(data) {
        const unitsSet = new Set();
        
        data.forEach(item => {
          if (item.prices && Array.isArray(item.prices)) {
            item.prices.forEach(price => {
              if (price.units !== null && price.units !== undefined) {
                unitsSet.add(parseInt(price.units));
              }
            });
          }
        });
        
        // Convertir Set a Array y ordenar
        return Array.from(unitsSet).sort((a, b) => a - b);
      }

      // Generar cabeceras de tabla dinámicamente
      function generateTableHeaders(availableUnits) {
        const thead = $('#prices_table thead tr');
        thead.empty();
        
        // Añadir columna de categoría
        thead.append('<th scope="col">Categoría</th>');
        
        // Añadir columnas de unidades
        availableUnits.forEach(unit => {
          thead.append(`<th scope="col" class="text-end">${unit}</th>`);
        });
      }

      // Poblar la tabla de precios
      function populatePricingTable(data, availableUnits) {
        const tbody = $('#prices_table tbody');
        tbody.empty();

        if (data.length === 0) {
          tbody.append('<tr><td colspan="' + (availableUnits.length + 1) + '" class="text-center text-muted">No hay datos disponibles</td></tr>');
          updateTableInfo(0, 0, 0);
          return;
        }

        data.forEach(item => {
          const row = $('<tr>');
          row.append(`<th scope="row">${item.category_code}</th>`);
          
          // Crear columnas para cada unidad disponible
          availableUnits.forEach(unit => {
            const price = findPriceForUnit(item.prices, unit);
            row.append(`<td class="text-end">${price || '-'}</td>`);
          });
          
          tbody.append(row);
        });

        updateTableInfo(1, data.length, data.length);
      }

      // Buscar precio para una unidad específica
      function findPriceForUnit(prices, unit) {
        const price = prices.find(p => p.units === unit);
        return price ? price.price : null;
      }

      // Actualizar información de la tabla
      function updateTableInfo(start, end, total) {
        $('#table-info').text(`Mostrando ${start} a ${end} de ${total} entradas`);
      }
    </script>
  </body>
</html>